#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>

using namespace std;

const int MAX_N = 100000;

vector<vector<int> > adj[MAX_N];
int deg[MAX_N];
int n,m;

void read_input()
{
  cin >> n >> m;
  if((n == 0) && (m==0))
    return;
    
  for(int i=0; i<n; i++) {
    deg[i]=0;
  }
  
  for(int i=0; i<m; i++) {
    int u,v,w,s;
    cin >> u >> v >> w >> s; u--; v--;
    vector<int> way1,way2;
    way1.push_back(v);way1.push_back(w);way1.push_back(s);
    way2.push_back(u);way2.push_back(w);way2.push_back(s);
    adj[u].push_back(way1);
    adj[v].push_back(way2);
    deg[v]++;
    deg[u]++;
  }
}

//pick min in the set
int min_Dist(int dist[],bool sptSet[]){
    int min = MAX_N, min_index;
    for (int i=0;i<n;i++){
        if(sptSet[i]==false && dist[i] <=min){
            min = dist[i];
            min_index = i;
        }
    }
    return min_index;
}

int ans;
void dijkstra_onlyfirst()
{
    int dist[n];
    bool sptSet[n];
    for (int i = 0; i < n; i++)
        dist[i] = MAX_N, sptSet[i] = false;
    dist[0] = 0;
    for (int i = 0; i < n - 1; i++) {
        int u = min_Dist(dist, sptSet);
        sptSet[u] = true;
        for (int j = 0; j < n; j++)
 
            // Update dist[v] only if is not in sptSet,
            // there is an edge from u to v, and total
            // weight of path from src to  v through u is
            // smaller than current value of dist[v]
            if (!sptSet[v] && graph[u][v]
                && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }
}

void print_check(){
    cout << "-------------------\n";
    for(int i=0;i<n;i++){
        for(int j=0;j<deg[i];j++){
            cout << adj[i][j][0] << " " << adj[i][j][1] << " " << adj[i][j][2] << '\n';
        }
        cout << "-------------------\n";
    }
}

int main(){
    read_input();
    print_check();
}